/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FriendsImport } from './routes/friends'
import { Route as CreateAllianceImport } from './routes/create-alliance'
import { Route as AlliancesImport } from './routes/alliances'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const FriendsRoute = FriendsImport.update({
  id: '/friends',
  path: '/friends',
  getParentRoute: () => rootRoute,
} as any)

const CreateAllianceRoute = CreateAllianceImport.update({
  id: '/create-alliance',
  path: '/create-alliance',
  getParentRoute: () => rootRoute,
} as any)

const AlliancesRoute = AlliancesImport.update({
  id: '/alliances',
  path: '/alliances',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/alliances': {
      id: '/alliances'
      path: '/alliances'
      fullPath: '/alliances'
      preLoaderRoute: typeof AlliancesImport
      parentRoute: typeof rootRoute
    }
    '/create-alliance': {
      id: '/create-alliance'
      path: '/create-alliance'
      fullPath: '/create-alliance'
      preLoaderRoute: typeof CreateAllianceImport
      parentRoute: typeof rootRoute
    }
    '/friends': {
      id: '/friends'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof FriendsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/alliances': typeof AlliancesRoute
  '/create-alliance': typeof CreateAllianceRoute
  '/friends': typeof FriendsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/alliances': typeof AlliancesRoute
  '/create-alliance': typeof CreateAllianceRoute
  '/friends': typeof FriendsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/alliances': typeof AlliancesRoute
  '/create-alliance': typeof CreateAllianceRoute
  '/friends': typeof FriendsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/alliances' | '/create-alliance' | '/friends'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/alliances' | '/create-alliance' | '/friends'
  id: '__root__' | '/' | '/alliances' | '/create-alliance' | '/friends'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlliancesRoute: typeof AlliancesRoute
  CreateAllianceRoute: typeof CreateAllianceRoute
  FriendsRoute: typeof FriendsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlliancesRoute: AlliancesRoute,
  CreateAllianceRoute: CreateAllianceRoute,
  FriendsRoute: FriendsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/alliances",
        "/create-alliance",
        "/friends"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/alliances": {
      "filePath": "alliances.tsx"
    },
    "/create-alliance": {
      "filePath": "create-alliance.tsx"
    },
    "/friends": {
      "filePath": "friends.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
